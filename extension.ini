[Chrome Extension]
  - content_script.ts
      • Listens: click/input/scroll; extracts selectors (css/xpath/role/text)
      • Captures: DOM snapshot hash, element thumbnail, URL, scrollY
      • Redacts secrets (password fields masked)
  - background.ts
      • Recording state machine, tab routing, HAR capture, message bus
      • Batches steps → IndexedDB (local-first)
  - popup.tsx
      • UI: Start/Stop, My Workflows, Run Now (manual)
      • Upload to backend (optional), show summaries, configure basics
  - storage (IndexedDB)
      • trace_<id>: step[] (chunked), thumbnails (base64), HAR refs

[Backend (Node/TS)]
  - api.gateway.ts (REST/gRPC)
      • Auth (JWT), workflow CRUD, upload/download trace
      • “Compile” endpoint → returns n8n JSON + diff
  - compiler/
      • trace_parser.ts → IR (intents: login/search/download/input)
      • selector_fingerprint.ts (attrs, role, text, dom-path, weights)
      • api_inference.ts (map HAR calls → HTTP nodes + creds)
      • n8n_emitter.ts (IR → workflow JSON, triggers, credentials schema)
  - self_heal/
      • dom_similarity.ts (Levenshtein on DOM paths, attr matching)
      • visual_match.ts (thumbnail embedding + on-page search)
      • retry_policy.ts (backoff, alternative selectors)
  - runner/
      • job_worker.ts (Playwright/Puppeteer, headful/headless)
      • step_executor.ts (ensure-visible → action → verify)
      • captcha_detector.ts (reCAPTCHA/hCaptcha heuristics)
      • otp_handler.ts (pause + bridge → fill OTP)
      • artifact_capture.ts (thumbs, downloaded files)
  - notifier/
      • whatsapp.ts (status, OTP prompt, action commands)
      • email.ts (start/stop, failures, artifacts links)
  - bridges/
      • otp_bridge.ts (WhatsApp inbound webhook → secure channel to runner)
      • resume_link.ts (deep-link to resume paused run in visible mode)
  - queue/
      • run_queue.ts (enqueue from n8n webhook → runner pods)

[n8n]
  - workflow.json (generated)
      • Trigger nodes: cron/webhook/manual
      • Custom nodes: BrowserRun (invoke runner API), HTTP Request (if API inferred)
  - credential store (encrypted): per-domain creds

[Persistence]
  - Firestore (minimal, free-tier friendly)
      • users: {id, phone, email, prefs}
      • workflows: {id, ownerId, name, summary, requiresCreds[], schedule, runMode}
      • runs: {id, workflowId, status, startedAt, endedAt, steps[{i,status,proofURL}], error?}
  - Firebase Storage
      • /proofs/{runId}/step-{i}.png (small thumbnails)
      • /artifacts/{runId}/… (optional PDFs/CSVs)
      • TTL/lifecycle rules for cleanup

[Key interfaces (shape-only)]
  TraceStep {
    id, tabId, url, action, selectors[], domHash, scrollY?, thumbRef?, ts
  }
  IRNode {
    intent: "login" | "navigate" | "click" | "fill" | "download",
    anchors: {selector, text?, role?, attrs?}[],
    inputs?: {key, type, source}[],  // e.g., {key:"password",type:"secret",source:"n8n"}
    verify?: {urlIncludes?, selectorVisible?, fileDownloaded?}
  }
  RunEvent {
    runId, stepIndex, type: "progress"|"paused_captcha"|"otp_needed"|"done"|"error",
    message?, proofURL?
  }