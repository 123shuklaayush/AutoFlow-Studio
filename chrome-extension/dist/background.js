(()=>{"use strict";new class{constructor(){this.STORAGE_KEYS={WORKFLOWS:"autoflow_workflows",SESSIONS:"autoflow_sessions",SETTINGS:"autoflow_settings"},this.state={currentSessionId:null,isRecording:!1,activeTabId:null,currentSteps:[],sessionStartTime:null},this.setupEventListeners(),this.initializeExtension()}setupEventListeners(){chrome.runtime.onMessage.addListener(this.handleMessage.bind(this)),chrome.tabs.onUpdated.addListener(this.handleTabUpdated.bind(this)),chrome.tabs.onActivated.addListener(this.handleTabActivated.bind(this)),chrome.tabs.onRemoved.addListener(this.handleTabRemoved.bind(this)),chrome.webNavigation.onCompleted.addListener(this.handleNavigationCompleted.bind(this)),chrome.webNavigation.onBeforeNavigate.addListener(this.handleBeforeNavigate.bind(this)),chrome.runtime.onInstalled.addListener(this.handleInstalled.bind(this)),chrome.runtime.onStartup.addListener(this.handleStartup.bind(this)),this.setupContextMenus()}async initializeExtension(){try{await this.restoreState(),this.updateBadge(),console.log("AutoFlow Background: Extension initialized")}catch(t){console.error("AutoFlow Background: Error during initialization:",t)}}handleMessage(t,e,s){switch(console.log("AutoFlow Background: Received message:",t.type),t.type){case"START_RECORDING":return this.startRecording(t.data,e.tab?.id).then(t=>s(t)).catch(t=>s({error:t.message})),!0;case"STOP_RECORDING":return this.stopRecording().then(t=>s(t)).catch(t=>s({error:t.message})),!0;case"GET_RECORDING_STATE":return s(this.getRecordingState()),!1;case"SAVE_TRACE_STEP":return this.saveTraceStep(t.step).then(t=>s(t)).catch(t=>s({error:t.message})),!0;case"GET_CURRENT_TAB":return chrome.tabs.query({active:!0,currentWindow:!0},t=>{s({tabId:t[0]?.id||null})}),!0;case"CAPTURE_VISIBLE_TAB":return this.captureVisibleTab(e.tab?.id).then(t=>s({screenshot:t})).catch(t=>s({error:t.message})),!0;case"CAPTURE_FULL_PAGE":return this.captureFullPage(e.tab?.id).then(t=>s({screenshot:t})).catch(t=>s({error:t.message})),!0;case"GET_WORKFLOWS":return this.getStoredWorkflows().then(t=>s({workflows:t})).catch(t=>s({error:t.message})),!0;case"SAVE_WORKFLOW":return this.saveWorkflow(t.data).then(t=>s(t)).catch(t=>s({error:t.message})),!0;case"DELETE_WORKFLOW":return this.deleteWorkflow(t.data.workflowId).then(t=>s(t)).catch(t=>s({error:t.message})),!0;case"EXPORT_SESSION":return this.exportCurrentSession().then(t=>s(t)).catch(t=>s({error:t.message})),!0;default:return console.warn("AutoFlow Background: Unknown message type:",t.type),s({error:"Unknown message type"}),!1}}async startRecording(t={},e){try{this.state.isRecording&&await this.stopRecording();const s=this.generateSessionId(),o=e?await this.getTabById(e):await this.getCurrentActiveTab();if(!o)throw new Error("No active tab found for recording");return this.state.currentSessionId=s,this.state.isRecording=!0,this.state.activeTabId=o.id,this.state.currentSteps=[],this.state.sessionStartTime=Date.now(),await this.saveState(),await this.ensureContentScriptInjected(o.id),await chrome.tabs.sendMessage(o.id,{type:"START_RECORDING",sessionId:s,config:t}),this.updateBadge(),console.log("AutoFlow Background: Recording started for session:",s),{success:!0,sessionId:s,tabId:o.id,url:o.url}}catch(t){throw console.error("AutoFlow Background: Error starting recording:",t),t}}async stopRecording(){try{if(!this.state.isRecording||!this.state.currentSessionId)return{success:!1,message:"No active recording session"};const t=this.state.currentSessionId,e=this.state.currentSteps.length,s=this.state.sessionStartTime?Date.now()-this.state.sessionStartTime:0;if(this.state.activeTabId)try{await chrome.tabs.sendMessage(this.state.activeTabId,{type:"STOP_RECORDING",sessionId:t})}catch(t){console.warn("AutoFlow Background: Could not notify content script:",t)}const o={sessionId:t,steps:[...this.state.currentSteps],duration:s,tabId:this.state.activeTabId,endTime:Date.now(),stepCount:e};return await this.saveSessionData(o),this.state.currentSessionId=null,this.state.isRecording=!1,this.state.activeTabId=null,this.state.currentSteps=[],this.state.sessionStartTime=null,await this.saveState(),this.updateBadge(),console.log("AutoFlow Background: Recording stopped for session:",t),{success:!0,sessionId:t,stepCount:e,duration:s,sessionData:o}}catch(t){throw console.error("AutoFlow Background: Error stopping recording:",t),t}}getRecordingState(){return{isRecording:this.state.isRecording,sessionId:this.state.currentSessionId,activeTabId:this.state.activeTabId,stepCount:this.state.currentSteps.length,duration:this.state.sessionStartTime?Date.now()-this.state.sessionStartTime:0}}async saveTraceStep(t){try{return this.state.isRecording&&this.state.currentSessionId?(this.state.currentSteps.push(t),await this.saveState(),this.state.currentSteps.length%5==0&&await this.saveSessionData({sessionId:this.state.currentSessionId,steps:[...this.state.currentSteps],stepCount:this.state.currentSteps.length,lastUpdated:Date.now()}),console.log("AutoFlow Background: Step saved:",t.id),{success:!0,stepIndex:this.state.currentSteps.length-1}):(console.warn("AutoFlow Background: Attempted to save step while not recording"),{success:!1,message:"Not currently recording"})}catch(t){throw console.error("AutoFlow Background: Error saving trace step:",t),t}}async captureVisibleTab(t){try{if(!t&&!this.state.activeTabId)throw new Error("No tab ID provided for screenshot");return await chrome.tabs.captureVisibleTab({format:"png",quality:90})}catch(t){return console.error("AutoFlow Background: Error capturing visible tab:",t),null}}async captureFullPage(t){return this.captureVisibleTab(t)}handleTabUpdated(t,e,s){this.state.isRecording&&this.state.activeTabId===t&&"complete"===e.status&&(console.log("AutoFlow Background: Recording tab navigation detected"),this.ensureContentScriptInjected(t).catch(t=>{console.error("AutoFlow Background: Error re-injecting content script:",t)}))}handleTabActivated(t){console.log("AutoFlow Background: Tab activated:",t.tabId)}handleTabRemoved(t,e){this.state.isRecording&&this.state.activeTabId===t&&(console.log("AutoFlow Background: Recording tab closed, stopping recording"),this.stopRecording().catch(t=>{console.error("AutoFlow Background: Error stopping recording after tab close:",t)}))}handleNavigationCompleted(t){0===t.frameId&&this.state.isRecording&&this.state.activeTabId===t.tabId&&this.ensureContentScriptInjected(t.tabId).catch(t=>{console.error("AutoFlow Background: Error ensuring content script after navigation:",t)})}handleBeforeNavigate(t){this.state.isRecording&&this.state.activeTabId===t.tabId&&console.log("AutoFlow Background: Navigation detected during recording")}handleInstalled(t){console.log("AutoFlow Background: Extension installed/updated:",t.reason),"install"===t.reason&&this.initializeStorage().catch(t=>{console.error("AutoFlow Background: Error initializing storage:",t)})}handleStartup(){console.log("AutoFlow Background: Extension started")}async ensureContentScriptInjected(t){try{await chrome.tabs.sendMessage(t,{type:"GET_RECORDING_STATE"}).catch(()=>null)||(await chrome.scripting.executeScript({target:{tabId:t},files:["content.js"]}),console.log("AutoFlow Background: Content script injected into tab:",t))}catch(t){throw console.error("AutoFlow Background: Error ensuring content script injection:",t),t}}setupContextMenus(){chrome.contextMenus.create({id:"autoflow-start-recording",title:"Start AutoFlow Recording",contexts:["page"]}),chrome.contextMenus.create({id:"autoflow-stop-recording",title:"Stop AutoFlow Recording",contexts:["page"]}),chrome.contextMenus.onClicked.addListener((t,e)=>{"autoflow-start-recording"===t.menuItemId?this.startRecording({},e?.id).catch(console.error):"autoflow-stop-recording"===t.menuItemId&&this.stopRecording().catch(console.error)})}updateBadge(){this.state.isRecording?(chrome.action.setBadgeText({text:"REC"}),chrome.action.setBadgeBackgroundColor({color:"#ef4444"}),chrome.action.setTitle({title:"AutoFlow Studio - Recording Active"})):(chrome.action.setBadgeText({text:""}),chrome.action.setTitle({title:"AutoFlow Studio - Smart Browser Automation"}))}generateSessionId(){return`session_${Date.now()}_${Math.random().toString(36).substr(2,9)}`}async getTabById(t){try{return await chrome.tabs.get(t)}catch(t){return null}}async getCurrentActiveTab(){try{return(await chrome.tabs.query({active:!0,currentWindow:!0}))[0]||null}catch(t){return null}}async saveState(){try{await chrome.storage.local.set({autoflow_state:this.state})}catch(t){throw console.error("AutoFlow Background: Error saving state:",t),t}}async restoreState(){try{const t=await chrome.storage.local.get(["autoflow_state"]);t.autoflow_state&&(this.state={...this.state,...t.autoflow_state},console.log("AutoFlow Background: State restored"))}catch(t){console.error("AutoFlow Background: Error restoring state:",t)}}async saveSessionData(t){try{const e=`session_${t.sessionId}`;await chrome.storage.local.set({[e]:t}),console.log("AutoFlow Background: Session data saved:",t.sessionId)}catch(t){throw console.error("AutoFlow Background: Error saving session data:",t),t}}async getStoredWorkflows(){try{return(await chrome.storage.local.get([this.STORAGE_KEYS.WORKFLOWS]))[this.STORAGE_KEYS.WORKFLOWS]||[]}catch(t){return console.error("AutoFlow Background: Error getting workflows:",t),[]}}async saveWorkflow(t){try{const e=await this.getStoredWorkflows(),s=e.findIndex(e=>e.id===t.id);return s>=0?e[s]=t:e.push(t),await chrome.storage.local.set({[this.STORAGE_KEYS.WORKFLOWS]:e}),{success:!0,workflow:t}}catch(t){throw console.error("AutoFlow Background: Error saving workflow:",t),t}}async deleteWorkflow(t){try{const e=(await this.getStoredWorkflows()).filter(e=>e.id!==t);return await chrome.storage.local.set({[this.STORAGE_KEYS.WORKFLOWS]:e}),{success:!0,deletedId:t}}catch(t){throw console.error("AutoFlow Background: Error deleting workflow:",t),t}}async exportCurrentSession(){try{if(!this.state.currentSessionId)throw new Error("No active session to export");return{sessionId:this.state.currentSessionId,steps:[...this.state.currentSteps],stepCount:this.state.currentSteps.length,duration:this.state.sessionStartTime?Date.now()-this.state.sessionStartTime:0,exportTime:Date.now(),tabId:this.state.activeTabId}}catch(t){throw console.error("AutoFlow Background: Error exporting session:",t),t}}async initializeStorage(){try{const t={[this.STORAGE_KEYS.WORKFLOWS]:[],[this.STORAGE_KEYS.SESSIONS]:{},[this.STORAGE_KEYS.SETTINGS]:{captureScreenshots:!0,autoSave:!0,maxStoredSessions:10}},e=await chrome.storage.local.get(Object.keys(t)),s={};for(const[o,r]of Object.entries(t))o in e||(s[o]=r);Object.keys(s).length>0&&(await chrome.storage.local.set(s),console.log("AutoFlow Background: Storage initialized with defaults"))}catch(t){throw console.error("AutoFlow Background: Error initializing storage:",t),t}}}})();